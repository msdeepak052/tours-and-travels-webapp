pipeline {
    agent any

    parameters {
        string(name: 'IMAGE_TAG', defaultValue: '', description: 'Tag of the Docker image')
        string(name: 'ECR_REPO', defaultValue: '', description: 'ECR repository name')
        string(name: 'AWS_REGION', defaultValue: '', description: 'AWS Region')
        string(name: 'APP_NAME', defaultValue: 'tours-travels-webapp', description: 'Name of the application')
        string(name: 'VERSION', defaultValue: '', description: 'Version')
    }

    environment {
        AWS_REGION = "${params.AWS_REGION}" // Ensure the AWS_REGION is set in the parameters
        ECR_REPO   = "${params.ECR_REPO}"    // Ensure the ECR_REPO is set in the parameters
        IMAGE_TAG  = "${params.IMAGE_TAG}"
        APP_NAME   = "${params.APP_NAME}"
        KUBECONFIG = "/var/lib/jenkins/.kube/config"
        ARGOCD_NAMESPACE = "argocd"
        ARGOCD_VERSION = "v3.0.5"
        //EKS_CLUSTER_NAME = sh(script: "aws eks list-clusters --region ${AWS_REGION} --query 'clusters[0]' --output text",returnStdout: true).trim()
        EKS_CLUSTER_NAME = sh(
        script: """
            aws eks list-clusters --region ${AWS_REGION} --query "clusters[?contains(@, 'deepak')]" --output text | head -1
        """,
        returnStdout: true
        ).trim()
        // Define the Git repository and path for Kubernetes manifests
        GIT_REPO = "https://github.com/msdeepak052/tours-and-travels-webapp.git" // Your manifests repo
        GIT_PATH = "k8s-app-manifests" // Path to your manifests in the repo
        IMAGE_TAG = "${params.VERSION}" // Passed from CI pipeline
    }


    stages {
        // Install Argo CD
        stage('Install Argo CD') {
            steps {
                script {
                    // Connect to EKS cluster
                    sh """
                        aws eks update-kubeconfig \
                        --name ${EKS_CLUSTER_NAME} \
                        --region ${AWS_REGION}
                    """

                    // Create argocd namespace if not exists
                    sh "kubectl create namespace ${ARGOCD_NAMESPACE} || true"

                    // Install Argo CD
                    sh """
                        kubectl apply -n ${ARGOCD_NAMESPACE} -f \
                        https://raw.githubusercontent.com/argoproj/argo-cd/${ARGOCD_VERSION}/manifests/install.yaml
                    """

                    // Wait for Argo CD to be ready
                    sh """
                        kubectl wait --for=condition=available deployment/argocd-server \
                        -n ${ARGOCD_NAMESPACE} --timeout=300s
                    """

                    // Get initial admin password
                    sh """
                        kubectl -n ${ARGOCD_NAMESPACE} get secret argocd-initial-admin-secret \
                        -o jsonpath="{.data.password}" | base64 -d > argocd-admin-password.txt
                    """
                    stash includes: 'argocd-admin-password.txt', name: 'argocd-creds'
                }
            }
        }

        // Configure Argo CD
        stage('Configure Argo CD') {
            steps {
                script {
                    // Patch Argo CD to use LoadBalancer (for external access)
                    sh """
                        kubectl patch svc argocd-server -n ${ARGOCD_NAMESPACE} \
                        -p '{"spec": {"type": "LoadBalancer"}}'
                    """

                    // Get Argo CD server URL
                    env.ARGOCD_SERVER = sh(
                        script: "kubectl get svc argocd-server -n ${ARGOCD_NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'",
                        returnStdout: true
                    ).trim()

                    // Login to Argo CD (using port-forward as fallback if LB not ready)
                    sh """
                        argocd login ${env.ARGOCD_SERVER} --grpc-web \
                        --username admin --password \$(cat argocd-admin-password.txt) \
                        || argocd login localhost:8080 --grpc-web \
                        --username admin --password \$(cat argocd-admin-password.txt)
                    """

                    // Add EKS cluster to Argo CD
                    sh """
                        argocd cluster add \$(kubectl config current-context) \
                        --name ${EKS_CLUSTER_NAME} \
                        --yes
                    """
                }
            }
        }

        // Deploy Application
        stage('Deploy Application') {
            steps {
                script {
                    // Create application in Argo CD
                    sh """
                        argocd app create ${APP_NAME} \
                        --repo ${GIT_REPO} \
                        --path ${GIT_PATH} \
                        --dest-server https://kubernetes.default.svc \
                        --dest-namespace app-ns \
                        --sync-policy automated \
                        --auto-prune \
                        --revision main \
                        --helm-set image.tag=${IMAGE_TAG}
                    """

                    // Sync application
                    sh "argocd app sync ${APP_NAME}"

                    // Wait for deployment to be healthy
                    sh "argocd app wait ${APP_NAME} --health"
                }
            }
        }

        // Verify Deployment
        stage('Verify Deployment') {
            steps {
                script {
                    // Get application URL
                    env.APP_URL = sh(
                        script: "kubectl get svc tours-travels-service -n app-ns -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'",
                        returnStdout: true
                    ).trim()

                    // Smoke test
                    sh """
                        curl -s -o /dev/null -w "%{http_code}" http://${env.APP_URL} | grep 200
                    """
                }
            }
        }
    }

    post {
        always {
            // Clean up
            deleteDir()
        }
        success {
            echo "✅ CD Pipeline SUCCESS - ${APP_NAME}:${IMAGE_TAG} deployed to ${EKS_CLUSTER_NAME}\nArgo CD: http://${env.ARGOCD_SERVER}\nApplication: http://${env.APP_URL}"
        }
        failure {
            echo "❌ CD Pipeline FAILED - ${APP_NAME}:${IMAGE_TAG} deployment to ${EKS_CLUSTER_NAME}"
        }
    }
}
