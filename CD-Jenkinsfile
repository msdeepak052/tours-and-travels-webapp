pipeline {
    agent any

    parameters {
        // string(name: 'IMAGE_TAG', defaultValue: '1.0.7', description: 'Tag of the Docker image')
        // string(name: 'ECR_REPO', defaultValue: 'app/tour-travels-webapp', description: 'ECR repository name')
        // string(name: 'AWS_REGION', defaultValue: 'ap-south-1', description: 'AWS Region')
        // string(name: 'APP_NAME', defaultValue: 'tours-travels-webapp', description: 'Name of the application')
        string(name: 'IMAGE_TAG', defaultValue: '', description: 'Tag of the Docker image')
        string(name: 'ECR_REPO', defaultValue: '', description: 'ECR repository name')
        string(name: 'AWS_REGION', defaultValue: '', description: 'AWS Region')
        string(name: 'APP_NAME', defaultValue: '', description: 'Name of the application')
    }

    environment {
        AWS_REGION = "${params.AWS_REGION}"
        ECR_REPO   = "${params.ECR_REPO}"
        IMAGE_TAG  = "${params.IMAGE_TAG}"
        APP_NAME   = "${params.APP_NAME}"
        KUBECONFIG = "/var/lib/jenkins/.kube/config"
        ARGOCD_NAMESPACE = "argocd"
        ARGOCD_VERSION = "v3.0.5"  // Using stable version
        EKS_CLUSTER_NAME = sh(
            script: """
                aws eks list-clusters --region ${AWS_REGION} --query "clusters[?contains(@, 'deepak')]" --output text | head -1
            """,
            returnStdout: true
        ).trim()
        GIT_REPO = "https://github.com/msdeepak052/tours-and-travels-webapp.git"
        GIT_PATH = "k8s-app-manifests"
    }

    stages {
        stage('Print Parameters') {
            steps {
                echo "=== PARAMETERS ==="
                echo "AWS_REGION: ${AWS_REGION}"
                echo "ECR_REPO: ${ECR_REPO}"
                echo "IMAGE_TAG: ${IMAGE_TAG}"
                echo "APP_NAME: ${APP_NAME}"
                echo "EKS_CLUSTER_NAME: ${EKS_CLUSTER_NAME}"
                sh "argocd version --client"
            }
        }
        // Get the artifcats from the Github
        stage('Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/msdeepak052/tours-and-travels-webapp.git'
            }
        }
        
        stage('Install Argo CD in Cluster') {
            steps {
                script {
                    // Configure kubectl
                    sh """
                        aws eks update-kubeconfig \
                        --name ${EKS_CLUSTER_NAME} \
                        --region ${AWS_REGION}
                    """

                    // Create namespace if not exists
                    sh "kubectl create namespace ${ARGOCD_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -"

                    // Install Argo CD
                    sh """
                        kubectl apply -n ${ARGOCD_NAMESPACE} -f \
                        https://raw.githubusercontent.com/argoproj/argo-cd/${ARGOCD_VERSION}/manifests/install.yaml
                    """

                    // Wait for Argo CD to be ready
                    sh """
                        kubectl wait --for=condition=available deployment/argocd-server \
                        -n ${ARGOCD_NAMESPACE} --timeout=300s
                    """
                }
            }
        }

        stage('Configure Argo CD') {
            steps {
                script {
                    // Patch service to LoadBalancer
                    sh """
                        kubectl patch svc argocd-server -n ${ARGOCD_NAMESPACE} \
                        -p '{"spec": {"type": "LoadBalancer"}}'
                    """

                    // Get admin password
                    sh """
                        until kubectl -n ${ARGOCD_NAMESPACE} get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d > argocd-admin-password.txt
                        do
                            sleep 5
                            echo "Waiting for Argo CD admin secret..."
                        done
                    """

                    // Get server URL

                    env.ARGOCD_SERVER = sh(
                        script: """
                            timeout 300 bash -c '
                                until hostname=\$(kubectl get svc argocd-server -n ${ARGOCD_NAMESPACE} -o jsonpath="{.status.loadBalancer.ingress[0].hostname}") && [ -n "\$hostname" ]
                                do
                                    sleep 5
                                    echo "Waiting for LoadBalancer hostname..."
                                done
                                echo "\$hostname"
                            '
                        """,
                        returnStdout: true
                    ).trim()

                    // env.ARGOCD_SERVER = sh(
                    //     script: """
                    //         until kubectl get svc argocd-server -n ${ARGOCD_NAMESPACE} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
                    //         do
                    //             sleep 5
                    //             echo "Waiting for LoadBalancer hostname..."
                    //         done
                    //     """,
                    //     returnStdout: true
                    // ).trim()

                    // Correct way to get and echo the password
                        env.ARGOCD_PASSWORD = sh(
                            script: 'cat argocd-admin-password.txt',
                            returnStdout: true
                        ).trim()



                    echo "Argo CD Server URL: ${env.ARGOCD_SERVER}"
                    echo "Argo CD Admin Password: ${env.ARGOCD_PASSWORD}"   

                }
            }
        }
        stage("Image Tag update in Kubernetes manifests") {
            steps {
                script {
                    // Get ECR URL with error handling
                    def ecrUrl = sh(
                        script: "aws ecr describe-repositories --repository-names ${ECR_REPO} --region ${AWS_REGION} --query 'repositories[0].repositoryUri' --output text",
                        returnStdout: true
                    ).trim()

                    if (!ecrUrl) {
                        error("Failed to retrieve ECR URL for repository: ${ECR_REPO}")
                    }

                    env.IMAGE_URI = "${ecrUrl}:${IMAGE_TAG}"
                    env.ECR_IMAGE_NAME = "${env.IMAGE_URI}"
                    echo "ECR Image Name: ${env.ECR_IMAGE_NAME}"

                    dir('k8s-app-manifests') {
                        // More robust sed command (works on both GNU and BSD sed)
                        sh """
                            # Backup original file (optional)
                            cp tours-travels-webapp-deployment.yml tours-travels-webapp-deployment.yml.bak

                            # Update image tag
                            sed -i.bak 's|image: .*|image: ${env.ECR_IMAGE_NAME}|' tours-travels-webapp-deployment.yml

                        """
                        // Verify the change
                        sh "grep 'image: ' tours-travels-webapp-deployment.yml"
                    }
                }
            }
        }

        stage("Commit code changes and push to GitHub"){
            steps{
                script{
                    withCredentials([gitUsernamePassword(credentialsId: 'githubCreds', gitToolName: 'Default')]) {
                        sh '''
                            echo "Initializing git repository: "
                            git init
                        
                            echo "Adding remote repository: git add"
                            git add .
                            
                            echo "Committing changes to Github Repository "
                            git commit -m "Updated Image Tag in Kubernetes manifests to ${env.ECR_IMAGE_NAME}"
                            
                            echo "Pushing changes to remote repository"
                            git push https://github.com/msdeepak052/tours-and-travels-webapp.git main
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                echo "=== CLEANUP ==="
                deleteDir()
            }
        }
        success {
            script {
                echo "✅ DEPLOYMENT SUCCESSFUL"
                echo "Argo CD Dashboard: http://${env.ARGOCD_SERVER}"
                echo "Application URL: http://${env.APP_URL}"
            }
        }
        failure {
            script {
                echo "❌ DEPLOYMENT FAILED"
                echo "Check logs for details"
            }
        }
    }

}


    
