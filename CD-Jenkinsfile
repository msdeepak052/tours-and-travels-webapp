pipeline {
    agent any

    parameters {
        string(name: 'IMAGE_TAG', defaultValue: '', description: 'Tag of the Docker image')
        string(name: 'ECR_REPO', defaultValue: '', description: 'ECR repository name')
        string(name: 'AWS_REGION', defaultValue: '', description: 'AWS Region')
        string(name: 'APP_NAME', defaultValue: '', description: 'Name of the application')
        booleanParam(name: 'FORCE_REINSTALL_MONITORING', defaultValue: true, description: 'Force reinstall monitoring stack')
    }

    environment {
        AWS_REGION = "${params.AWS_REGION}"
        ECR_REPO   = "${params.ECR_REPO}"
        IMAGE_TAG  = "${params.IMAGE_TAG}"
        APP_NAME   = "${params.APP_NAME}"
        KUBECONFIG = "/var/lib/jenkins/.kube/config"
        ARGOCD_NAMESPACE = "argocd"
        ARGOCD_VERSION = "v3.0.5"  // Using stable version
        EKS_CLUSTER_NAME = sh(
            script: """
                aws eks list-clusters --region ${AWS_REGION} --query "clusters[?contains(@, 'deepak')]" --output text | head -1
            """,
            returnStdout: true
        ).trim()
        GIT_REPO = "https://github.com/msdeepak052/tours-and-travels-webapp.git"
        GIT_PATH = "k8s-app-manifests"
    }

    stages {
        stage('Print Parameters') {
            steps {
                echo "=== PARAMETERS ==="
                echo "AWS_REGION: ${AWS_REGION}"
                echo "ECR_REPO: ${ECR_REPO}"
                echo "IMAGE_TAG: ${IMAGE_TAG}"
                echo "APP_NAME: ${APP_NAME}"
                echo "EKS_CLUSTER_NAME: ${EKS_CLUSTER_NAME}"
                sh "argocd version --client"
            }
        }
        
        stage('Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/msdeepak052/tours-and-travels-webapp.git'
            }
        }
        
        stage('Install Argo CD in Cluster') {
            steps {
                script {
                    // Configure kubectl
                    sh """
                        aws eks update-kubeconfig \
                        --name ${EKS_CLUSTER_NAME} \
                        --region ${AWS_REGION}
                    """

                    // Check if Argo CD is already installed
                    def argocdInstalled = sh(
                        script: """
                            if kubectl get deployment argocd-server -n ${ARGOCD_NAMESPACE} >/dev/null 2>&1; then
                                echo "true"
                            else
                                echo "false"
                            fi
                        """,
                        returnStdout: true
                    ).trim()

                    if (argocdInstalled == "false") {
                        echo "Installing Argo CD..."
                        // Create namespace if not exists
                        sh "kubectl create namespace ${ARGOCD_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -"

                        // Install Argo CD
                        sh """
                            kubectl apply -n ${ARGOCD_NAMESPACE} -f \
                            https://raw.githubusercontent.com/argoproj/argo-cd/${ARGOCD_VERSION}/manifests/install.yaml
                        """

                        // Wait for Argo CD to be ready
                        sh """
                            kubectl wait --for=condition=available deployment/argocd-server \
                            -n ${ARGOCD_NAMESPACE} --timeout=300s
                        """
                    } else {
                        echo "Argo CD is already installed in namespace ${ARGOCD_NAMESPACE}, skipping installation."
                    }
                }
            }
        }

        stage('Configure Argo CD') {
            steps {
                script {
                    // Check if service is already LoadBalancer
                    def currentServiceType = sh(
                        script: """
                            kubectl get svc argocd-server -n ${ARGOCD_NAMESPACE} -o jsonpath='{.spec.type}'
                        """,
                        returnStdout: true
                    ).trim()
                    
                    // Only patch if not already LoadBalancer
                    if (currentServiceType != "LoadBalancer") {
                        echo "Patching Argo CD service to LoadBalancer..."
                        sh """
                            kubectl patch svc argocd-server -n ${ARGOCD_NAMESPACE} \
                            -p '{"spec": {"type": "LoadBalancer"}}'
                        """
                    } else {
                        echo "Argo CD service is already LoadBalancer, skipping patch"
                    }

                    // Get admin password 
                    env.ARGOCD_PASSWORD = sh(
                        script: """
                            until kubectl -n ${ARGOCD_NAMESPACE} get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
                            do
                                sleep 5
                                echo "Waiting for Argo CD admin secret..."
                            done
                        """,
                        returnStdout: true
                    ).trim()

                    // Get server URL
                    env.ARGOCD_SERVER = sh(
                        script: """
                            timeout 300 bash -c '
                                until hostname=\$(kubectl get svc argocd-server -n ${ARGOCD_NAMESPACE} -o jsonpath="{.status.loadBalancer.ingress[0].hostname}") && [ -n "\$hostname" ]
                                do
                                    sleep 5
                                    echo "Waiting for LoadBalancer hostname..."
                                done
                                echo "\$hostname"
                            '
                        """,
                        returnStdout: true
                    ).trim()

                    echo "Argo CD Server URL: ${env.ARGOCD_SERVER}"
                    echo "Argo CD Admin Password: ${env.ARGOCD_PASSWORD}"   
                }
            }
        }
        
        stage("Configure Prometheus & Grafana") {
            steps {
                script {
                    // Install Helm if not already installed
                    def helmInstalled = sh(
                        script: 'helm version --short >/dev/null 2>&1 && echo "true" || echo "false"',
                        returnStdout: true
                    ).trim()
                    
                    if (helmInstalled == "false") {
                        sh """
                            curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
                        """
                    }
                    
                    // Check if we should force reinstall
                    def forceReinstall = params.FORCE_REINSTALL_MONITORING ?: false
                    def monitoringInstalled = sh(
                        script: """
                            if helm status kube-prometheus-stack -n monitoring >/dev/null 2>&1; then
                                echo "true"
                            else
                                echo "false"
                            fi
                        """,
                        returnStdout: true
                    ).trim()
                    
                    if (monitoringInstalled == "true" && !forceReinstall) {
                        echo "Prometheus and Grafana are already installed, skipping installation."
                        
                        // Still get the URLs and password for reference
                        sh """
                            env.GRAFANA_PASSWORD = \$(kubectl get secret --namespace monitoring kube-prometheus-stack-grafana -o jsonpath="{.data.admin-password}" | base64 --decode)
                            env.GRAFANA_URL = \$(kubectl get svc kube-prometheus-stack-grafana -n monitoring -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
                            env.PROMETHEUS_URL = \$(kubectl get svc kube-prometheus-stack-prometheus -n monitoring -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
                        """
                        echo "Grafana URL: http://${env.GRAFANA_URL}"
                        echo "Prometheus URL: http://${env.PROMETHEUS_URL}"
                    } else {
                        if (forceReinstall && monitoringInstalled == "true") {
                            echo "Force reinstall requested - uninstalling existing deployment..."
                            sh """
                                helm uninstall kube-prometheus-stack -n monitoring
                                kubectl delete crd alertmanagerconfigs.monitoring.coreos.com || true
                                kubectl delete crd alertmanagers.monitoring.coreos.com || true
                                kubectl delete crd podmonitors.monitoring.coreos.com || true
                                kubectl delete crd probes.monitoring.coreos.com || true
                                kubectl delete crd prometheuses.monitoring.coreos.com || true
                                kubectl delete crd prometheusrules.monitoring.coreos.com || true
                                kubectl delete crd servicemonitors.monitoring.coreos.com || true
                                kubectl delete crd thanosrulers.monitoring.coreos.com || true
                            """
                        }
                        
                        echo "Installing Prometheus and Grafana..."
                        sh """
                            # Add Helm repositories
                            helm repo add stable https://charts.helm.sh/stable || true
                            helm repo add prometheus-community https://prometheus-community.github.io/helm-charts || true
                            helm repo update
                            
                            # Create namespace if not exists
                            kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -
                            
                            # Install Prometheus Stack
                            helm install kube-prometheus-stack prometheus-community/kube-prometheus-stack \
                                -n monitoring \
                                --set prometheus.service.type=LoadBalancer \
                                --set grafana.service.type=LoadBalancer \
                                --set prometheus.prometheusSpec.serviceMonitorSelectorNilUsesHelmValues=false \
                                --set prometheus.prometheusSpec.podMonitorSelectorNilUsesHelmValues=false \
                                --wait
                            
                            # Wait for Grafana deployment (Prometheus is a StatefulSet)
                            kubectl wait --for=condition=available deployment/kube-prometheus-stack-grafana -n monitoring --timeout=300s
                            kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=prometheus -n monitoring --timeout=300s
                            
                            # Get Grafana admin password
                            env.GRAFANA_PASSWORD = \$(kubectl get secret --namespace monitoring kube-prometheus-stack-grafana -o jsonpath="{.data.admin-password}" | base64 --decode)
                            
                            # Get service URLs
                            env.GRAFANA_URL = \$(kubectl get svc kube-prometheus-stack-grafana -n monitoring -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
                            env.PROMETHEUS_URL = \$(kubectl get svc kube-prometheus-stack-prometheus -n monitoring -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
                        """
                        
                        echo "Grafana URL: http://${env.GRAFANA_URL}"
                        echo "Grafana Username: admin"
                        echo "Grafana Password: ${env.GRAFANA_PASSWORD}"
                        echo "Prometheus URL: http://${env.PROMETHEUS_URL}"
                    }
                }
            }
        }

        stage("Install AWS Load Balancer Controller") {
            steps {
                script {
                    // Verify Helm is installed
                    def helmInstalled = sh(
                        script: 'helm version --short >/dev/null 2>&1 && echo "true" || echo "false"',
                        returnStdout: true
                    ).trim()
                    
                    if (helmInstalled == "false") {
                        sh """
                            curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
                        """
                    }

                    // Check if AWS Load Balancer Controller is already installed via Helm
                    def albControllerInstalled = sh(
                        script: """
                            if helm status aws-load-balancer-controller -n kube-system >/dev/null 2>&1; then
                                echo "true"
                            else
                                echo "false"
                            fi
                        """,
                        returnStdout: true
                    ).trim()

                    if (albControllerInstalled == "true") {
                        echo "AWS Load Balancer Controller is already installed via Helm."
                    } else {
                        echo "Installing AWS Load Balancer Controller..."
                        
                        // First ensure IAM OIDC provider is associated with cluster
                        sh """
                            # Associate IAM OIDC provider if not already associated
                            eksctl utils associate-iam-oidc-provider \\
                                --cluster ${EKS_CLUSTER_NAME} \\
                                --region ${AWS_REGION} \\
                                --approve
                            
                            # Add EKS Helm repository
                            helm repo add eks https://aws.github.io/eks-charts || true
                            helm repo update
                            
                            # Create IAM policy if not exists (with proper escaping)
                            POLICY_ARN=\$(aws iam list-policies --query 'Policies[?PolicyName==\\'AWSLoadBalancerControllerIAMPolicy\\'].Arn' --output text)
                            if [ -z "\$POLICY_ARN" ]; then
                                curl -s -o iam-policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.4.7/docs/install/iam_policy.json
                                POLICY_ARN=\$(aws iam create-policy \\
                                    --policy-name AWSLoadBalancerControllerIAMPolicy \\
                                    --policy-document file://iam-policy.json \\
                                    --query 'Policy.Arn' --output text)
                                rm -f iam-policy.json
                            fi
                            
                            # Create IAM role and service account with retry logic
                            retry_count=0
                            max_retries=3
                            
                            while [ \$retry_count -lt \$max_retries ]; do
                                if eksctl create iamserviceaccount \\
                                    --cluster=${EKS_CLUSTER_NAME} \\
                                    --namespace=kube-system \\
                                    --name=aws-load-balancer-controller \\
                                    --attach-policy-arn=\$POLICY_ARN \\
                                    --override-existing-serviceaccounts \\
                                    --region ${AWS_REGION} \\
                                    --approve; then
                                    break
                                else
                                    retry_count=\$((retry_count+1))
                                    echo "Failed to create IAM service account (attempt \$retry_count/\$max_retries)"
                                    sleep 10
                                fi
                            done
                            
                            if [ \$retry_count -eq \$max_retries ]; then
                                echo "❌ Failed to create IAM service account after \$max_retries attempts"
                                exit 1
                            fi
                            
                            # Install the Helm chart with wait
                            helm install aws-load-balancer-controller eks/aws-load-balancer-controller \\
                                -n kube-system \\
                                --set clusterName=${EKS_CLUSTER_NAME} \\
                                --set serviceAccount.create=false \\
                                --set serviceAccount.name=aws-load-balancer-controller \\
                                --wait
                        """
                    }

                    // Enhanced verification with timeout
                    echo "Verifying AWS Load Balancer Controller installation..."
                    timeout(time: 5, unit: 'MINUTES') {
                        waitUntil {
                            def status = sh(
                                script: """
                                    kubectl get deployment aws-load-balancer-controller -n kube-system -o jsonpath='{.status.readyReplicas}' 2>/dev/null || echo "0"
                                """,
                                returnStdout: true
                            ).trim()
                            
                            if (status == "1") {
                                // Additional verification - check pod logs for successful startup
                                def podStatus = sh(
                                    script: """
                                        kubectl logs -n kube-system -l app.kubernetes.io/name=aws-load-balancer-controller --tail=20 | grep -q 'successfully acquired lease' && echo "ready" || echo "not-ready"
                                    """,
                                    returnStdout: true
                                ).trim()
                                
                                return podStatus == "ready"
                            }
                            return false
                        }
                    }

                    // Get version and status information
                    def albVersion = sh(
                        script: """
                            kubectl get deployment aws-load-balancer-controller -n kube-system \\
                            -o jsonpath='{.spec.template.spec.containers[0].image}' | awk -F: '{print \$NF}'
                        """,
                        returnStdout: true
                    ).trim()
                    
                    echo "✅ AWS Load Balancer Controller is running and healthy"
                    echo "Controller version: ${albVersion}"
                    
                    // Display load balancer information
                    sh """
                        echo "=== Controller Deployment Status ==="
                        kubectl get deployment aws-load-balancer-controller -n kube-system -o wide
                        
                        echo "=== Controller Pods ==="
                        kubectl get pods -n kube-system -l app.kubernetes.io/name=aws-load-balancer-controller -o wide
                    """
                }
            }
        }
                
                stage("Image Tag update in Kubernetes manifests") {
                    steps {
                        script {
                            // Get ECR URL with error handling
                            def ecrUrl = sh(
                                script: "aws ecr describe-repositories --repository-names ${ECR_REPO} --region ${AWS_REGION} --query 'repositories[0].repositoryUri' --output text",
                                returnStdout: true
                            ).trim()

                            if (!ecrUrl) {
                                error("Failed to retrieve ECR URL for repository: ${ECR_REPO}")
                            }

                            env.IMAGE_URI = "${ecrUrl}:${IMAGE_TAG}"
                            env.ECR_IMAGE_NAME = "${env.IMAGE_URI}"
                            echo "ECR Image Name: ${env.ECR_IMAGE_NAME}"

                            dir('k8s-app-manifests') {
                                // More robust sed command (works on both GNU and BSD sed)
                                sh """
                                    # Backup original file (optional)
                                    cp tours-travels-webapp-deployment.yml tours-travels-webapp-deployment.yml.bak

                                    # Update image tag
                                    sed -i.bak 's|image: .*|image: ${env.ECR_IMAGE_NAME}|' tours-travels-webapp-deployment.yml
                                """
                                // Verify the change
                                sh "grep 'image: ' tours-travels-webapp-deployment.yml"
                            }
                        }
                    }
                }

                stage("Commit code changes and push to GitHub"){
                    steps{
                        script{
                            withCredentials([gitUsernamePassword(credentialsId: 'githubCreds', gitToolName: 'Default')]) {
                                sh """
                                    echo "Initializing git repository: "
                                    git init
                                
                                    echo "Adding remote repository: git add"
                                    git add .
                                    
                                    echo "Committing changes to Github Repository "
                                    git commit -m "Updated Image Tag in Kubernetes manifests to ${env.ECR_IMAGE_NAME}"
                                    
                                    echo "Pushing changes to remote repository"
                                    git push https://github.com/msdeepak052/tours-and-travels-webapp.git main
                                """
                            }
                        }
                    }
                }
            }

    post {
        always {
            script {
                echo "=== CLEANUP ==="
                deleteDir()
            }
        }
        
        success {
            script {
                // Safely get application URL (won't fail if service/namespace doesn't exist)
                def appUrl = sh(
                    script: """
                        kubectl get service tours-travels-service -n app-ns -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo ""
                    """,
                    returnStdout: true
                ).trim()

                // Set APP_URL only if we got a valid value
                if (appUrl) {
                    env.APP_URL = appUrl
                    echo "Application URL: <a href='http://${env.APP_URL}'>http://${env.APP_URL}</a>"
                } else {
                    echo "ℹ️ Service/Namespace not found - No application URL available"
                }

                echo "✅ DEPLOYMENT SUCCESSFUL"
                echo "Argo CD Dashboard: http://${env.ARGOCD_SERVER}"
                echo "Grafana Dashboard: http://${env.GRAFANA_URL}"
                echo "Prometheus Dashboard: http://${env.PROMETHEUS_URL}"
                
                // For email notifications or other uses where you still want the raw URL:
                echo "Raw Argo CD URL: http://${env.ARGOCD_SERVER}"
                if (appUrl) {
                    echo "Raw Application URL: http://${env.APP_URL}"
                }
            }
        }
        
        failure {
            script {
                echo "❌ DEPLOYMENT FAILED"
                echo "Check logs for details"
            }
        }
    }
}
